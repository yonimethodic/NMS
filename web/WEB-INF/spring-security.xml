<?xml version='1.0' encoding='UTF-8' ?>
<!-- was: <?xml version="1.0" encoding="UTF-8"?> -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">

    <!-- To allow standards-based @Secured annotation, enable secured-annotations
    See Spring Security 3.1 Reference 2.4 Method Security 
    - http://static.springsource.org/spring-security/site/docs/3.1.x/reference/ns-config.html#ns-protect-pointcut 
    - http://static.springsource.org/spring-security/site/docs/3.1.x/reference/appendix-namespace.html#d0e8651
    See Spring Security 3.1 Referecne 15.1.1 Common Built-In Expressions
    - http://static.springsource.org/spring-security/site/docs/3.1.x/reference/el-access.html -->
    <security:global-method-security secured-annotations="enabled" />
	
    <!-- This is where we configure Spring-Security  -->
    <security:http auto-config="true" use-expressions="true">
        
        <security:intercept-url pattern="/user/**" access="hasRole('ROLE_USER')" />
               
        <security:form-login
            username-parameter="txtUsername" 
            password-parameter="txtPassword" 
            login-processing-url="/j_spring_security_check" 
            authentication-failure-url="/index?message=Invalid Username or Password" 
            default-target-url="/dashboard"
            login-page="/index"/>
			
        <security:logout 
            invalidate-session="true" 
            logout-success-url="/index" 
            logout-url="/logout"/>
	
    </security:http>
	
    <!-- Declare an authentication-manager to use a custom userDetailsService -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
	
    <!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
    <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>
	
</beans> 
